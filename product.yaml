--- product.yaml ---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS Service Catalog product for configuring cross-account IAM assume role 
  for Airflow using EKS Pod Identity (IRSA). This template sets up the trust 
  relationship between Account A (EKS source) and Account B (target account) 
  for controlled S3 access.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Account Configuration'
        Parameters:
          - SourceAccountId
          - TargetAccountId
          - AWSRegion
      - Label:
          default: 'EKS Cluster Configuration'
        Parameters:
          - EKSClusterName
          - KubernetesNamespace
          - ServiceAccountName
      - Label:
          default: 'IAM Role Configuration'
        Parameters:
          - RoleAName
          - RoleBName
          - PolicyAName
          - PolicyBName
      - Label:
          default: 'S3 Access Configuration'
        Parameters:
          - S3BucketPrefix
          - EnableFullS3Access
      - Label:
          default: 'Tagging and Metadata'
        Parameters:
          - Environment
          - ProjectName
          - CostCenter
    ParameterLabels:
      SourceAccountId:
        default: 'Source AWS Account ID (Account A - EKS)'
      TargetAccountId:
        default: 'Target AWS Account ID (Account B - S3)'
      AWSRegion:
        default: 'AWS Region'
      EKSClusterName:
        default: 'EKS Cluster Name'
      KubernetesNamespace:
        default: 'Kubernetes Namespace'
      ServiceAccountName:
        default: 'Kubernetes Service Account Name'

Parameters:
  # Account Configuration
  SourceAccountId:
    Type: String
    Description: 'AWS Account ID where the EKS cluster is running (Account A)'
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: 'Must be a valid 12-digit AWS account ID'

  TargetAccountId:
    Type: String
    Description: 'AWS Account ID containing S3 resources (Account B)'
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: 'Must be a valid 12-digit AWS account ID'

  AWSRegion:
    Type: String
    Description: 'AWS Region for resources'
    Default: 'us-east-2'
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1

  # EKS Configuration
  EKSClusterName:
    Type: String
    Description: 'Name of the EKS cluster in Account A'
    MinLength: 1
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9-_]*$'
    ConstraintDescription: 'Must contain only alphanumeric characters, hyphens, and underscores'

  KubernetesNamespace:
    Type: String
    Description: 'Kubernetes namespace where the service account exists'
    Default: 'airflow'
    MinLength: 1
    MaxLength: 63
    AllowedPattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    ConstraintDescription: 'Must be a valid Kubernetes namespace name'

  ServiceAccountName:
    Type: String
    Description: 'Kubernetes service account name for Airflow workers'
    Default: 'airflow-worker'
    MinLength: 1
    MaxLength: 253
    AllowedPattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    ConstraintDescription: 'Must be a valid Kubernetes service account name'

  # IAM Role Configuration
  RoleAName:
    Type: String
    Description: 'Name for the pod identity role in Account A (source)'
    Default: 'AirflowPodIdentityRole'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[\w+=,.@-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and +=,.@-_'

  RoleBName:
    Type: String
    Description: 'Name for the target role in Account B'
    Default: 'AirflowCrossAccountTargetRole'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[\w+=,.@-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and +=,.@-_'

  PolicyAName:
    Type: String
    Description: 'Name for the managed policy attached to Role A'
    Default: 'AirflowAssumeRoleBPolicy'
    MinLength: 1
    MaxLength: 128
    AllowedPattern: '^[\w+=,.@-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and +=,.@-_'

  PolicyBName:
    Type: String
    Description: 'Name for the managed policy attached to Role B (S3 permissions)'
    Default: 'AirflowS3AccessPolicy'
    MinLength: 1
    MaxLength: 128
    AllowedPattern: '^[\w+=,.@-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and +=,.@-_'

  # S3 Configuration
  S3BucketPrefix:
    Type: String
    Description: 'Prefix for S3 bucket names (e.g., "airflow" for airflow-* buckets). Use "*" for all buckets.'
    Default: 'airflow'
    MinLength: 1
    MaxLength: 63

  EnableFullS3Access:
    Type: String
    Description: 'Enable full S3 access (all buckets) or restrict to bucket prefix'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  # Tagging
  Environment:
    Type: String
    Description: 'Environment name for resource tagging'
    Default: 'production'
    AllowedValues:
      - development
      - staging
      - production
      - qa

  ProjectName:
    Type: String
    Description: 'Project name for resource tagging'
    Default: 'Airflow-CrossAccount-Access'
    MinLength: 1
    MaxLength: 100

  CostCenter:
    Type: String
    Description: 'Cost center for billing and chargeback'
    Default: 'DataPlatform'
    MinLength: 1
    MaxLength: 50

Conditions:
  # Condition to determine if we're deploying in Source Account (Account A)
  IsSourceAccount: !Equals [!Ref 'AWS::AccountId', !Ref SourceAccountId]
  
  # Condition to determine if we're deploying in Target Account (Account B)
  IsTargetAccount: !Equals [!Ref 'AWS::AccountId', !Ref TargetAccountId]
  
  # Condition for full S3 access
  UseFullS3Access: !Equals [!Ref EnableFullS3Access, 'true']
  
  # Condition for restricted S3 access (bucket prefix)
  UseRestrictedS3Access: !Not [!Condition UseFullS3Access]

Resources:
  # ========================================================================
  # ACCOUNT A RESOURCES (Source Account - EKS Cluster)
  # ========================================================================
  
  # Role A: Pod Identity Role for EKS Service Account
  # This role is assumed by Kubernetes pods using IRSA
  PodIdentityRole:
    Type: AWS::IAM::Role
    Condition: IsSourceAccount
    Properties:
      RoleName: !Ref RoleAName
      Description: !Sub 'Pod identity role for ${ServiceAccountName} in ${KubernetesNamespace} namespace to assume cross-account role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Trust policy for EKS Pod Identity
          - Sid: EKSPodIdentityTrust
            Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              - 'sts:TagSession'
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref SourceAccountId
          # Additional trust for federated OIDC provider (standard IRSA)
          - Sid: EKSServiceAccountFederation
            Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${SourceAccountId}:oidc-provider/oidc.eks.${AWSRegion}.amazonaws.com/id/${EKSClusterName}'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                !Sub 'oidc.eks.${AWSRegion}.amazonaws.com/id/${EKSClusterName}:sub': !Sub 'system:serviceaccount:${KubernetesNamespace}:${ServiceAccountName}'
                !Sub 'oidc.eks.${AWSRegion}.amazonaws.com/id/${EKSClusterName}:aud': 'sts.amazonaws.com'
      MaxSessionDuration: 3600
      Path: /
      Tags:
        - Key: Name
          Value: !Ref RoleAName
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: 'AWS-Service-Catalog'
        - Key: Purpose
          Value: 'EKS-Pod-Identity-Cross-Account'
        - Key: SourceAccount
          Value: !Ref SourceAccountId
        - Key: TargetAccount
          Value: !Ref TargetAccountId

  # Policy A: Allow Role A to assume Role B in target account
  AssumeRoleBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsSourceAccount
    Properties:
      ManagedPolicyName: !Ref PolicyAName
      Description: !Sub 'Policy allowing ${RoleAName} to assume ${RoleBName} in Account ${TargetAccountId}'
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeTargetAccountRole
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource:
              - !Sub 'arn:aws:iam::${TargetAccountId}:role/${RoleBName}'
          # Optional: Add TagSession for additional context
          - Sid: AllowTagSession
            Effect: Allow
            Action:
              - 'sts:TagSession'
            Resource:
              - !Sub 'arn:aws:iam::${TargetAccountId}:role/${RoleBName}'
      Roles:
        - !Ref PodIdentityRole

  # ========================================================================
  # ACCOUNT B RESOURCES (Target Account - S3 Resources)
  # ========================================================================

  # Role B: Target role in Account B with S3 permissions
  # This role is assumed by Role A from Account A
  TargetAccountRole:
    Type: AWS::IAM::Role
    Condition: IsTargetAccount
    Properties:
      RoleName: !Ref RoleBName
      Description: !Sub 'Target role for cross-account access from ${RoleAName} in Account ${SourceAccountId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Trust policy allowing Role A from Account A to assume this role
          - Sid: CrossAccountTrustFromRoleA
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${SourceAccountId}:role/${RoleAName}'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${AWSRegion}/${SourceAccountId}/${EKSClusterName}/${KubernetesNamespace}/${ServiceAccountName}'
          # Additional trust for direct account assumption (if needed)
          - Sid: CrossAccountTrustFromAccount
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${SourceAccountId}:root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'aws:PrincipalArn': !Sub 'arn:aws:iam::${SourceAccountId}:role/${RoleAName}'
      MaxSessionDuration: 3600
      Path: /
      Tags:
        - Key: Name
          Value: !Ref RoleBName
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: 'AWS-Service-Catalog'
        - Key: Purpose
          Value: 'Cross-Account-Target-Role'
        - Key: SourceAccount
          Value: !Ref SourceAccountId
        - Key: TrustedRole
          Value: !Ref RoleAName

  # Policy B: S3 permissions for Role B
  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsTargetAccount
    Properties:
      ManagedPolicyName: !Ref PolicyBName
      Description: !Sub 'S3 access policy for ${RoleBName} with controlled bucket access'
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Full S3 access (if enabled)
          - !If
            - UseFullS3Access
            - Sid: FullS3Access
              Effect: Allow
              Action:
                - 's3:ListAllMyBuckets'
                - 's3:ListBucket'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
                - 's3:GetObjectVersion'
                - 's3:PutObjectAcl'
                - 's3:GetObjectAcl'
              Resource:
                - 'arn:aws:s3:::*'
            - !Ref 'AWS::NoValue'
          # Restricted S3 access by bucket prefix (if full access disabled)
          - !If
            - UseRestrictedS3Access
            - Sid: ListBucketsByPrefix
              Effect: Allow
              Action:
                - 's3:ListAllMyBuckets'
                - 's3:GetBucketLocation'
              Resource: '*'
              Condition:
                StringLike:
                  's3:prefix': !Sub '${S3BucketPrefix}*'
            - !Ref 'AWS::NoValue'
          - !If
            - UseRestrictedS3Access
            - Sid: BucketLevelOperations
              Effect: Allow
              Action:
                - 's3:ListBucket'
                - 's3:GetBucketLocation'
                - 's3:GetBucketVersioning'
              Resource: !Sub 'arn:aws:s3:::${S3BucketPrefix}*'
            - !Ref 'AWS::NoValue'
          - !If
            - UseRestrictedS3Access
            - Sid: ObjectLevelOperations
              Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
                - 's3:GetObjectVersion'
                - 's3:PutObjectAcl'
                - 's3:GetObjectAcl'
              Resource: !Sub 'arn:aws:s3:::${S3BucketPrefix}*/*'
            - !Ref 'AWS::NoValue'
      Roles:
        - !Ref TargetAccountRole

Outputs:
  # Account A Outputs
  PodIdentityRoleArn:
    Description: 'ARN of the Pod Identity Role (Role A) in source account'
    Value: !If
      - IsSourceAccount
      - !GetAtt PodIdentityRole.Arn
      - !Sub 'arn:aws:iam::${SourceAccountId}:role/${RoleAName}'
    Export:
      Name: !Sub '${AWS::StackName}-PodIdentityRoleArn'

  PodIdentityRoleName:
    Description: 'Name of the Pod Identity Role (Role A)'
    Value: !Ref RoleAName
    Export:
      Name: !Sub '${AWS::StackName}-PodIdentityRoleName'

  AssumeRoleBPolicyArn:
    Description: 'ARN of the policy allowing Role A to assume Role B'
    Value: !If
      - IsSourceAccount
      - !Ref AssumeRoleBPolicy
      - !Sub 'arn:aws:iam::${SourceAccountId}:policy/${PolicyAName}'
    Export:
      Name: !Sub '${AWS::StackName}-AssumeRoleBPolicyArn'

  # Account B Outputs
  TargetAccountRoleArn:
    Description: 'ARN of the Target Role (Role B) in target account'
    Value: !If
      - IsTargetAccount
      - !GetAtt TargetAccountRole.Arn
      - !Sub 'arn:aws:iam::${TargetAccountId}:role/${RoleBName}'
    Export:
      Name: !Sub '${AWS::StackName}-TargetAccountRoleArn'

  TargetAccountRoleName:
    Description: 'Name of the Target Role (Role B)'
    Value: !Ref RoleBName
    Export:
      Name: !Sub '${AWS::StackName}-TargetAccountRoleName'

  S3AccessPolicyArn:
    Description: 'ARN of the S3 access policy attached to Role B'
    Value: !If
      - IsTargetAccount
      - !Ref S3AccessPolicy
      - !Sub 'arn:aws:iam::${TargetAccountId}:policy/${PolicyBName}'
    Export:
      Name: !Sub '${AWS::StackName}-S3AccessPolicyArn'

  # Configuration Outputs
  ExternalId:
    Description: 'External ID used in trust policy for additional security'
    Value: !Sub '${AWSRegion}/${SourceAccountId}/${EKSClusterName}/${KubernetesNamespace}/${ServiceAccountName}'
    Export:
      Name: !Sub '${AWS::StackName}-ExternalId'

  KubernetesServiceAccountAnnotation:
    Description: 'Annotation to add to Kubernetes ServiceAccount for IRSA'
    Value: !Sub 'eks.amazonaws.com/role-arn: arn:aws:iam::${SourceAccountId}:role/${RoleAName}'

  NextSteps:
    Description: 'Next steps after deploying this stack'
    Value: !Sub |
      1. Deploy this stack in Account A (${SourceAccountId}) first to create Role A
      2. Deploy this stack in Account B (${TargetAccountId}) to create Role B
      3. Annotate your Kubernetes ServiceAccount: kubectl annotate serviceaccount ${ServiceAccountName} -n ${KubernetesNamespace} eks.amazonaws.com/role-arn=arn:aws:iam::${SourceAccountId}:role/${RoleAName} --overwrite
      4. Create pod identity association: aws eks create-pod-identity-association --cluster-name ${EKSClusterName} --namespace ${KubernetesNamespace} --service-account ${ServiceAccountName} --role-arn arn:aws:iam::${SourceAccountId}:role/${RoleAName} --region ${AWSRegion}
      5. Test access from pod: aws sts assume-role --role-arn arn:aws:iam::${TargetAccountId}:role/${RoleBName} --role-session-name airflow-test
      6. Configure Airflow connection with role_arn: arn:aws:iam::${TargetAccountId}:role/${RoleBName}

  DeploymentAccount:
    Description: 'Account where this stack is currently deployed'
    Value: !Ref 'AWS::AccountId'

  StackRegion:
    Description: 'Region where this stack is deployed'
    Value: !Ref 'AWS::Region'