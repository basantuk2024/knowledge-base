AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS Service Catalog Product: CrossAccountAssumeRole
  Enables cross-account IAM role configuration for EKS Airflow workers 
  using IRSA and AWS Pod Identity.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Account Configuration'
        Parameters:
          - SourceAccountId
          - TargetAccountId
      - Label:
          default: 'EKS Configuration'
        Parameters:
          - EKSClusterName
          - OIDCProviderId
          - KubernetesNamespace
          - ServiceAccountName
      - Label:
          default: 'IAM Role Configuration'
        Parameters:
          - RoleAName
          - RoleBName
          - PolicyAName
          - PolicyBName
      - Label:
          default: 'S3 Access Configuration'
        Parameters:
          - S3BucketPrefix
          - EnableFullS3Access
      - Label:
          default: 'Tagging and Metadata'
        Parameters:
          - Environment
          - ProjectName
          - CostCenter
    ParameterLabels:
      SourceAccountId:
        default: 'Source AWS Account ID (Account A - EKS)'
      TargetAccountId:
        default: 'Target AWS Account ID (Account B - S3)'
      EKSClusterName:
        default: 'EKS Cluster Name'
      OIDCProviderId:
        default: 'OIDC Provider ID (from EKS OIDC URL)'
      KubernetesNamespace:
        default: 'Kubernetes Namespace'
      ServiceAccountName:
        default: 'Kubernetes Service Account Name'

Parameters:
  # Account Configuration
  SourceAccountId:
    Type: String
    Description: 'AWS Account ID where the EKS cluster is running (Account A)'
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: 'Must be a valid 12-digit AWS account ID'

  TargetAccountId:
    Type: String
    Description: 'AWS Account ID containing S3 resources (Account B)'
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: 'Must be a valid 12-digit AWS account ID'

  # EKS Configuration
  EKSClusterName:
    Type: String
    Description: 'Name of the EKS cluster in Account A'
    MinLength: 1
    MaxLength: 100

  OIDCProviderId:
    Type: String
    Description: >
      OIDC provider ID from your EKS cluster OIDC URL 
      (e.g., E3E8C37D2B6E5E29D6CE0A8CC4C8BXXXX)
    MinLength: 10
    MaxLength: 80

  KubernetesNamespace:
    Type: String
    Description: 'Kubernetes namespace for Airflow service account'
    Default: 'airflow'
    AllowedPattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'

  ServiceAccountName:
    Type: String
    Description: 'Kubernetes service account name for Airflow workers'
    Default: 'airflow-worker'
    AllowedPattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'

  # IAM Role Configuration
  RoleAName:
    Type: String
    Description: 'Name for IAM role in Account A (EKS Pod Identity)'
    Default: 'AirflowPodIdentityRole'
    AllowedPattern: '^[\\w+=,.@-]+$'

  RoleBName:
    Type: String
    Description: 'Name for IAM role in Account B (S3 target role)'
    Default: 'AirflowCrossAccountTargetRole'
    AllowedPattern: '^[\\w+=,.@-]+$'

  PolicyAName:
    Type: String
    Description: 'Name for IAM policy attached to Role A (assume Role B)'
    Default: 'AirflowAssumeRoleBPolicy'
    AllowedPattern: '^[\\w+=,.@-]+$'

  PolicyBName:
    Type: String
    Description: 'Name for IAM policy attached to Role B (S3 access)'
    Default: 'AirflowS3AccessPolicy'
    AllowedPattern: '^[\\w+=,.@-]+$'

  # S3 Access
  S3BucketPrefix:
    Type: String
    Description: 'Prefix for S3 bucket names (e.g., "airflow" for airflow-* buckets)'
    Default: 'airflow'

  EnableFullS3Access:
    Type: String
    Description: 'Enable full S3 access (true) or restrict by bucket prefix (false)'
    Default: 'false'
    AllowedValues: ['true', 'false']

  # Tagging
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production', 'qa']
    Description: 'Environment tag for resources'

  ProjectName:
    Type: String
    Default: 'Airflow-CrossAccount-Access'
    Description: 'Project name for tagging'

  CostCenter:
    Type: String
    Default: 'DataPlatform'
    Description: 'Cost center for tagging'

Conditions:
  IsSourceAccount: !Equals [!Ref 'AWS::AccountId', !Ref SourceAccountId]
  IsTargetAccount: !Equals [!Ref 'AWS::AccountId', !Ref TargetAccountId]
  UseFullS3Access: !Equals [!Ref EnableFullS3Access, 'true']

Resources:
  # ------------------------------------------------------------------------
  # Account A (EKS Source)
  # ------------------------------------------------------------------------
  PodIdentityRole:
    Type: AWS::IAM::Role
    Condition: IsSourceAccount
    Properties:
      RoleName: !Sub '${RoleAName}-${Environment}'
      Description: !Sub 'Pod Identity Role for ${ServiceAccountName} in ${KubernetesNamespace}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EKSIRSATrust
            Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${SourceAccountId}:oidc-provider/oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDCProviderId}'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                !Sub 'oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDCProviderId}:sub': !Sub 'system:serviceaccount:${KubernetesNamespace}:${ServiceAccountName}'
                !Sub 'oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDCProviderId}:aud': 'sts.amazonaws.com'
          - Sid: EKSPodIdentity
            Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              - 'sts:TagSession'
      MaxSessionDuration: 3600
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: ServiceCatalog

  AssumeRoleBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsSourceAccount
    Properties:
      ManagedPolicyName: !Sub '${PolicyAName}-${Environment}'
      Description: !Sub 'Allows ${RoleAName} to assume ${RoleBName} in Account ${TargetAccountId}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: !Sub 'arn:aws:iam::${TargetAccountId}:role/${RoleBName}-${Environment}'
      Roles:
        - !Ref PodIdentityRole

  # ------------------------------------------------------------------------
  # Account B (S3 Target)
  # ------------------------------------------------------------------------
  TargetAccountRole:
    Type: AWS::IAM::Role
    Condition: IsTargetAccount
    Properties:
      RoleName: !Sub '${RoleBName}-${Environment}'
      Description: !Sub 'Target role for cross-account access from ${SourceAccountId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CrossAccountTrust
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${SourceAccountId}:role/${RoleAName}-${Environment}'
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${AWS::Region}/${SourceAccountId}/${EKSClusterName}/${KubernetesNamespace}/${ServiceAccountName}'
      MaxSessionDuration: 3600
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: ServiceCatalog

  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsTargetAccount
    Properties:
      ManagedPolicyName: !Sub '${PolicyBName}-${Environment}'
      Description: !Sub 'S3 access policy for ${RoleBName} with controlled access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - !If 
            - UseFullS3Access
            - Effect: Allow
              Action:
                - 's3:ListAllMyBuckets'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Resource: 'arn:aws:s3:::*'
            - Effect: Allow
              Action:
                - 's3:ListAllMyBuckets'
                - 's3:GetBucketLocation'
                - 's3:ListBucket'
                - 's3:GetObject'
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:aws:s3:::${S3BucketPrefix}*'
                - !Sub 'arn:aws:s3:::${S3BucketPrefix}*/*'
      Roles:
        - !Ref TargetAccountRole

Outputs:
  PodIdentityRoleArn:
    Description: ARN of the Pod Identity Role (Account A)
    Value: !If
      - IsSourceAccount
      - !GetAtt PodIdentityRole.Arn
      - !Sub 'arn:aws:iam::${SourceAccountId}:role/${RoleAName}-${Environment}'

  TargetAccountRoleArn:
    Description: ARN of the Target Role (Account B)
    Value: !If
      - IsTargetAccount
      - !GetAtt TargetAccountRole.Arn
      - !Sub 'arn:aws:iam::${TargetAccountId}:role/${RoleBName}-${Environment}'

  ExternalId:
    Description: 'External ID used in trust policy for security'
    Value: !Sub '${AWS::Region}/${SourceAccountId}/${EKSClusterName}/${KubernetesNamespace}/${ServiceAccountName}'

  KubernetesServiceAccountAnnotation:
    Description: 'Annotation for Kubernetes ServiceAccount'
    Value: !Sub 'eks.amazonaws.com/role-arn: arn:aws:iam::${SourceAccountId}:role/${RoleAName}-${Environment}'

  NextSteps:
    Description: 'Guidance for setup sequence'
    Value: !Sub |
      1. Deploy in Account A (${SourceAccountId}) to create Role A.
      2. Deploy in Account B (${TargetAccountId}) to create Role B.
      3. Annotate ServiceAccount:
         kubectl annotate sa ${ServiceAccountName} -n ${KubernetesNamespace} eks.amazonaws.com/role-arn=arn:aws:iam::${SourceAccountId}:role/${RoleAName}-${Environment} --overwrite
      4. Test:
         aws sts assume-role --role-arn arn:aws:iam::${TargetAccountId}:role/${RoleBName}-${Environment} --role-session-name airflow-test
